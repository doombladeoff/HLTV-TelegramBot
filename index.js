const { Telegraf, session, Scenes } = require('telegraf')
const { message } = require ("telegraf/filters");

const moment  = require("moment");
const { Keyboard, Key } = require('./lib')

const { HLTV } = require('hltv');

const config = require('./config.json');

const bot = new Telegraf(config.Token);

const commandsKeyboard = Keyboard.make([
    [
        '–¢–û–ü-30 –∫–æ–º–∞–Ω–¥', '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ç–∫–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤'
    ], 
    [
        '–ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã', '–°–æ–±—ã—Ç–∏—è',
    ], 
    [
        '–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤', '–ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É'
    ]
]);
const backKeyboard = Keyboard.make(['Back']);


const main = (ctx) => {
    return ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏—à–∏ –Ω–∏–∂–µ.', Keyboard.reply(['Start'], { columns: 1 }))
}

//#region  Scenes –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ HLTV
    // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const findUser = new Scenes.BaseScene('findUserScene');
    const findTeam = new Scenes.BaseScene('findTeamScene');

    findUser.enter((ctx) => {
    ctx.reply('–ö–æ–≥–æ –∏—â–µ–º?');
    });

    findTeam.enter((ctx) => {
        ctx.reply('–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?');
        });
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ü–µ–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ —Å—Ü–µ–Ω—É
    const stage = new Scenes.Stage([findUser, findTeam], { ttl: 10});
//#endregion

bot.start(main)
bot.hears('Back', main);
bot.use(session());
bot.use(stage.middleware());


bot.hears('Start', async (ctx) => {
    return ctx.reply(`–ù–∏–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã`, Keyboard.combine(commandsKeyboard, backKeyboard).reply())
})

bot.hears('–¢–û–ü-30 –∫–æ–º–∞–Ω–¥', (ctx) => {
    const dataTeam = [];
    const chanelID = ctx.chat.id

    HLTV.getTeamRanking().then((res) => {
        res.map(teamData => {
            dataTeam.push(`<b>${teamData.place}</b>` + '.\t' + `<b>${teamData.team.name}</b>` + '\n–û—á–∫–æ–≤: ' + teamData.points)
        })
        try {
            bot.telegram.sendMessage(chanelID, `<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¢–û–ü-30 –∫–æ–º–∞–Ω–¥ HLTV</b>\n\n` + dataTeam.join('\n\n'), { parse_mode: 'HTML'})
        } catch (error) {
            console.log(error)
        }
    })
})

bot.hears('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ç–∫–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤', (ctx) => {
    const dataStream = [];
    const chanelID = ctx.chat.id
    HLTV.getStreams().then((res) => {
        const sliceArr = res.slice(0, 10);

        const headerText = '<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¢–û–ü-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ –Ω–∞ HLTV</b>\n\n';
        const leftLink = '<a href="';
        const rightLink = '">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º</a>';

        let index = 1;
        sliceArr.map(streamData => {
            dataStream.push(headerText + `<b>${index++}. ${streamData.name}</b>`+ '\n–ó—Ä–∏—Ç–µ–ª–µ–π:\t' + streamData.viewers + '\n–°—Ç—Ä–∞–Ω–∞:\t' + streamData.country.name + '\n' + leftLink+streamData.link+rightLink);
        });
        try {
            const message = dataStream.join('\n\n');
            bot.telegram.sendMessage(chanelID, message, { parse_mode: 'HTML' })
        } catch (error) {
            console.error(error)
        }
        
      })
})

bot.hears('–ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞', (ctx) => {

    ctx.scene.enter('findUserScene')

    findUser.on('text', (ctx) => {
        const chanelID = ctx.chat.id
        const requestFindUser = ctx.message.text;

        ctx.reply(`–ò—â—É ${requestFindUser}...`);
        HLTV.getPlayerByName({ name: requestFindUser })
        .catch(error => {
            console.log(error);
            return ctx.reply('–¢–∞–∫–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω üòû')
        })
        .then(async res => {
            console.log(res)
            try {
                const messageUserHLTV = {
                    User: {
                        name: '–ò–º—è: ' + res.name + '\n',
                        age: '–í–æ–∑—Ä–∞—Å—Ç: ' + res.age + '\n',
                        nickname: '–ù–∏–∫–Ω–µ–π–º: ' + res.ign + '\n',
                        country: '–°—Ç—Ä–∞–Ω–∞: ' + res.country.name + '\n',
                        currentTeam: '–¢–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞: ' + res.team.name + '\n',
                    },

                    Statistic: {
                        deathsPerRound: '–°–µ–º–µ—Ä—Ç–µ–π –∑–∞ —Ä–∞—É–Ω: ' + res.statistics.deathsPerRound + '\n',
                        headshots: '–ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É: ' + res.statistics.headshots + '\n',
                        killsPerRound: '–£–±–∏–π—Å—Ç–≤ –∑–∞ —Ä–∞—É–Ω–¥: ' + res.statistics.killsPerRound + '\n',
                        mapsPlayed: '–°—ã–≥—Ä–∞–Ω—ã—Ö –∫–∞—Ä—Ç: ' + res.statistics.mapsPlayed + '\n',
                        rating: '–†–µ–π—Ç–∏–Ω–≥: ' + res.statistics.rating + '\n',
                        roundsContributed: '–¢–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞: ' + res.statistics.roundsContributed + '\n'
                    },

                    Socials: {
                        twitter: '–¢–≤–∏—Ç—Ç–µ—Ä: ' + res.twitter + '\n',
                        twitch: '–¢–≤–∏—Ç—á: ' + res.twitch + '\n',
                        instagram: '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º: ' + res.instagram + '\n'
                    }
                }

                bot.telegram.sendMessage(chanelID, `–í–æ—Ç –∫–æ–≥–æ –Ω–∞—à–ª–∏:\n\n` + 
                    messageUserHLTV.User.name +
                    messageUserHLTV.User.age +
                    messageUserHLTV.User.nickname +
                    messageUserHLTV.User.country +
                    messageUserHLTV.User.currentTeam +
                    "\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
                    messageUserHLTV.Statistic.deathsPerRound +
                    messageUserHLTV.Statistic.headshots +
                    messageUserHLTV.Statistic.killsPerRound +
                    messageUserHLTV.Statistic.mapsPlayed +
                    messageUserHLTV.Statistic.rating +
                    messageUserHLTV.Statistic.roundsContributed +
                    "\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n" +
                    messageUserHLTV.Socials.twitter +
                    messageUserHLTV.Socials.twitch +
                    messageUserHLTV.Socials.instagram, 
                { parse_mode: 'HTML' })
            } catch (error) {
                console.error(error)
            }
        })
    ctx.scene.leave();
    });

})

bot.hears('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–º—ã', (ctx) => {
    let messageThread = []

    HLTV.getRecentThreads().then((res) => {
        let index = 1;
        messageThread.push("<b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–º:</b>\n")
        let category = String;
        res.map(thread => {

            switch (thread.category) {
                case 'cs':
                    category = 'Counter Strike'
                    break;
                case 'match':
                    category = '–ú–∞—Ç—á'
                    break;
                case 'news':
                    category = '–ù–æ–≤–æ—Å—Ç–∏'
                    break;
            }
            messageThread.push(`<b>${index++}. ${thread.title}</b>\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>\t\t${category}\n<a href="hltv.org${thread.link}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç</a>\n`)
        })
        try {
            ctx.reply(messageThread.join('\n').toString(), {parse_mode: 'HTML'})
        } catch (error) {
            console.log(error)
            return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòû')
        }
      })
})

bot.hears('–°–æ–±—ã—Ç–∏—è', (ctx) => {
    let eventData = []
    HLTV.getEvents().then(res => {
        var currentYear = moment(new Date()).format('YYYY')
        eventData.push(`<b>C–æ–±—ã—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ (${currentYear})</b>\n`)
        let index = 1;
        res.map(event => {
            var eventYear = moment(event.dateStart).format('YYYY')
            var getEventDateStart = moment(event.dateStart).format('DD-MM-YYYY')
            var getEventDateEnd = moment(event.dateEnd).format('DD-MM-YYYY')

            if (eventYear == currentYear) {
                if((event.location) && (event.prizePool)){
                    switch (event.prizePool) {
                        case 'Other':
                            event.prizePool = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                            break;
                    }
                    eventData.push(`<b>${index++}. ${event.name}</b>\n<b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b>\n\t\t–ù–∞—á–∞–ª–æ:\t\t${getEventDateStart}\n\t\t–ö–æ–Ω–µ—Ü:\t\t${getEventDateEnd}\n<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b>\t\t${event.location.name}\n<b>–ü—Ä–∏–∑–æ–≤—ã–µ:</b>\t\t${event.prizePool}\n`)
                } else {
                    eventData.push(`<b>${index++}. ${event.name}</b>\n<b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b>\n\t\t–ù–∞—á–∞–ª–æ:\t\t${getEventDateStart}\n\t\t–ö–æ–Ω–µ—Ü:\t\t${getEventDateEnd}\n`)
                }
            }
        })
        try {
            ctx.reply(eventData.join('\n').toString(), {parse_mode: 'HTML'})
        } catch (error) {
            console.log(error)
        }
    })
})

bot.hears('–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤', async (ctx) => {
    await ctx.reply('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è... üòâ')
    let playerData = [];

    // var getEndDate = moment(new Date()).format('YYYY-MM-DD')
    // var getStartDate = moment().subtract(7, 'days').format('YYYY-MM-DD');

    HLTV.getPlayerRanking({}).then(res => {
        playerData.push(`<b>T–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤</b>\n`);

        const top10 = res.slice(0, 10)

        let index = 1;
        top10.map(player => {
            playerData.push(`<b>${index++}. ${player.player.name}</b>\n<b>–ö–æ–º–∞–Ω–¥–∞:</b>\t\t${player.teams[0].name}\n<b>–†–µ–π—Ç–∏–Ω–≥:</b>\t\t${player.rating1}\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>KD</b>\t\t${player.kd}\n<b>KD Diff:</b>\t\t${player.kdDiff}\n<b>–°—ã–≥—Ä–∞–Ω—ã—Ö –∫–∞—Ä—Ç:</b>\t\t${player.maps}\n<b>–†–∞—É–Ω–¥–æ–≤:</b>\t\t${player.rounds}\n`)
        })

        try {
            ctx.reply(playerData.join('\n').toString(), {parse_mode: 'HTML'})
        } catch (error) {
            console.error(error)
        }

    })
    .catch(err => console.error(err))
})

bot.hears('–ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É', (ctx) => {
    ctx.scene.enter('findTeamScene')
    findTeam.on('text', async (ctx) => {
        const requestFindTeam = ctx.message.text;
        await ctx.reply(`–ò—â—É ${requestFindTeam}...`);

        let teamText = [];

        HLTV.getTeamByName({ name: requestFindTeam})
            .then(res => {
                console.log(res)
                let textString = `<b>–ö–æ–º–∞–Ω–¥–∞ ${res.name}</b>\n` + `\n<b>–°—Ç—Ä–∞–Ω–∞:</b>\t\t${res.country.name}\n` + `\n<b>–°–æ—Å—Ç–∞–≤:</b>`

                for(let i = 0; i < res.players.length; i++) {
                    switch (res.players[i].type) {
                        case 'Starter':
                            res.players[i].type = '–ò–≥—Ä–æ–∫'
                            break;
                        case 'Benched':
                            res.players[i].type = '–í –∑–∞–ø–∞—Å–µ'
                            break;
                        case 'Coach':
                            res.players[i].type = '–¢—Ä–µ–Ω–µ—Ä'
                            break;
                    }
                    teamText.push(`\n${i+1}. <b><u>${res.players[i].name}</u></b>\n\t\t\t<b>–†–æ–ª—å:</b>\t\t${res.players[i].type}`)
                }

                teamText.push(`\n\n<b>–°–æ—Ü. —Å–µ—Ç–∏:</b>\n${res.twitter}\n${res.instagram}`)
                ctx.reply(textString + teamText.toString(), {parse_mode: 'HTML'})
            })
            .catch(err => {
                console.error(err)
                ctx.reply(`–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É <b><u>${requestFindTeam}</u></b>. üòû\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!`, { parse_mode: 'HTML'})
            })
        
    ctx.scene.leave();
    });



})

bot.launch();
console.log('[ BOT ] Starting')
